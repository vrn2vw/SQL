WITH TEST AS (
select
    gl_product_group AS GL
    , gl_product_group_desc AS GL_DESC
    , category_code AS CATEGORY
    , '2018' AS YEARS
    , COUNT (DISTINCT order_id) AS ORDERS
    , COUNT (DISTINCT customer_id) AS CUSTOMERS
    , SUM(quantity) AS UNITS
    , SUM(quantity*our_price) AS OPS

from prime_ddl.d_member_purchases

where marketplace_id = 1
   -- and gl_product_group IN (229, 121)
   and gl_product_group IN (121,229,23,193,201,196,60,79,309,198,147)
    and category_code IN (
    '12107000','14700100','14700200','14700500','14700900','14701100','14701200','14701400','14701500','19301000',
    '19301100','19301300','19301600','19301700','19302000','19302100','19302200','19302400','19302800','19601000',
    '19602000','19603000','19604000','19605000','19606000','19607000','19809100','19809600','20103500','20105800','20106000',
    '20106400','20106500','20106600','20106700','20107000','22900175','22903000','22905000','22907000','22908000',
    '2305000','2305300','2305500','30904000','30905000','30905500','30907000','6079000','7902000','7902500'
)


    and order_day BETWEEN to_date('20180620', 'YYYYMMDD') AND to_date('20181001', 'YYYYMMDD')
    and our_price > 0
   --  and our_price < 12.01
    and is_free_replacement != 'Y'
    and coalesce(is_liability, 'N') = 'N'
    and order_item_level_condition NOT IN (6, 22)  -- Cancelled before shipping, Digital fraud
    and is_digital = 'N'
    -- Removes Fresh purchases
    and greatest(is_fresh, is_fresh_item) != 'Y'

 GROUP BY 1,2,3
)

, TEST2 AS (
select
    gl_product_group AS GL
    , gl_product_group_desc AS GL_DESC
    , category_code AS CATEGORY
    , '2019' AS YEARS
    , COUNT (DISTINCT order_id) AS ORDERS
    , COUNT (DISTINCT customer_id) AS CUSTOMERS
    , SUM(quantity) AS UNITS
    , SUM(quantity*our_price) AS OPS

from prime_ddl.d_member_purchases

where marketplace_id = 1
   -- and gl_product_group IN (229, 121)
   and gl_product_group IN (121,229,23,193,201,196,60,79,309,198,147)
    and category_code IN (
    '12107000','14700100','14700200','14700500','14700900','14701100','14701200','14701400','14701500','19301000',
    '19301100','19301300','19301600','19301700','19302000','19302100','19302200','19302400','19302800','19601000',
    '19602000','19603000','19604000','19605000','19606000','19607000','19809100','19809600','20103500','20105800','20106000',
    '20106400','20106500','20106600','20106700','20107000','22900175','22903000','22905000','22907000','22908000',
    '2305000','2305300','2305500','30904000','30905000','30905500','30907000','6079000','7902000','7902500'
)


    and order_day BETWEEN to_date('20190620', 'YYYYMMDD') AND to_date('20191001', 'YYYYMMDD')
    and our_price > 0
    -- and our_price < 12.01
    and is_free_replacement != 'Y'
    and coalesce(is_liability, 'N') = 'N'
    and order_item_level_condition NOT IN (6, 22)  -- Cancelled before shipping, Digital fraud
    and is_digital = 'N'
    -- Removes Fresh purchases
    and greatest(is_fresh, is_fresh_item) != 'Y'

 GROUP BY 1,2,3
)

, COMB AS (
SELECT * FROM TEST
UNION ALL
SELECT * FROM TEST2
)

SELECT
    YEARS
    , GL
    , GL_DESC
--    , CATEGORY
    , SUM(CUSTOMERS) AS CUST
    , SUM(ORDERS) AS ORD
    , SUM(UNITS) AS UN
    , SUM(OPS) AS OPS
   
FROM COMB

GROUP BY 1,2,3

ORDER BY OPS DESC;
